<script>
    //datepicker
    $(function () {
        $("input#daybegin").datepicker({ dateFormat: "yy-mm-dd" })
    });
    //очист. стиля
    $(function () {
        $('footer').css("clear", "both")
    })
    //------------------- при Edit ----------------------------------
    $(function () {
        //a)-изм.названия кнопок
        if ($('input#auctionId').val() != 0) {
            console.log("Edit begin (out _FormAddProduct)!")
            $('input[type=submit').val("Edit");
            //b)-изм. формат даты 12.09.2020 22:10:00 -> 12.09.2020
            var oldValue = $('input#daybegin').val()
            var newValue = oldValue.split(' ')[0]
            $('input#daybegin').val(newValue)
        }
    })

    //form + Upload Files-> Auction/Create
    $(function () {
        var myForm = document.forms[0];
        $('input[type=submit').on('click', function (e) {
            $(this).attr("disabled", "disabled");
            $(myForm).triggerHandler('submit');
        });
        $(myForm).on('submit', function (e) {
            var files = document.getElementById('file').files;
            console.log(files)
            if (window.FormData !== undefined) {
                var data = new FormData(document.forms[0]);
                console.log(data)
                for (var x = 0; x < files.length; x++) {
                    data.append("file" + x, files[x]);
                }
                $.ajax({
                    type: "POST",
                    url: "/Auctions/Create",
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        alert(result); //"Данные записаны!"
                        $(location).attr('href', '/Auctions/Index');
                    },
                    error: function (xhr, status) {
                        alert("Ошибка редактирования: " + status);
                        $('input[type=submit]').attr("disabled", "disabled");
                    }
                });
            } else {
                alert("Браузер не поддерживает загрузку файлов HTML5!");
            }
        });
    })
</script>


@model OnlineAuction.ViewModels.AuctionEditVM

@using (Html.BeginForm()) {
    @*@Html.AntiForgeryToken() *@
    <div style="margin-bottom:20px; max-width:inherit" class="col-md-5">
        <div class="form-horizontal">
            @{
                if (Model != null) {
                    <input type="hidden" Id="auctionId" name="Id" value=@Model.Id>
                    <div class="hidden div-price">@Model.Price</div>
                }
            }


            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @id = "id_price" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Step, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Step, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Step, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RedemptionPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RedemptionPrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RedemptionPrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DayBegin, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DayBegin, new { htmlAttributes = new { @class = "form-control", id = "daybegin", type = "datetime", name = "DayBegin", placeholder = "yyyy-mm-dd" } })
                    @Html.ValidationMessageFor(model => model.DayBegin, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TimeBegin, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TimeBegin, new { htmlAttributes = new { @class = "form-control", type = "time", id = "timebegin", name = "timebegin", placeholder = "hh:min" } })
                    @Html.ValidationMessageFor(model => model.TimeBegin, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control", type = "number", name = "duration", id = "duration", placeholder = Model.Duration } })
                    @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label for="upload"></label>
                <input type="file" name="upload" id="file" accept="image/jpeg" class="form-control" data-filename-placement="inside" title="Выбрать файл" />
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-info  btn-block" />
                </div>
            </div>
        </div>
    </div>
}


<div class="col-md-6">
    @if (ViewBag.editImg == null) {
        <img src="~/Files/create.png" alt="noImg" />
    }
    else {
        @Html.Raw("<img  style='width: 100%',  src=\"data:image/jpeg;base64," + Convert.ToBase64String(ViewBag.editImg.ImageData) + "\" />")
    }

</div>
